// app.js

import express from 'express';
import { engine } from 'express-handlebars';
import Handlebars from 'handlebars';
import productManager from './managers/productManager.js';
import productsRouter from './routes/productsRouter.js';
import cartsRouter from './routes/cartsRouter.js';
import viewsRouter from './routes/viewsRouter.js';
import { validateProductData } from './middlewares/validations.js';
import config from './config.js';
import { Server } from 'socket.io';

const app = express();

// Iniciar el servidor HTTP para Socket.io
const httpServer = app.listen(config.PORT, () => {
    console.log(`Servidor escuchando en el puerto ${config.PORT}, accede a: http://localhost:${config.PORT}`);
});

// Configuracion Socket.io
const socketServer = new Server(httpServer);
app.set('socketio', socketServer);

socketServer.on('connection', async (socket) => {
    console.log('Nuevo cliente conectado');
    
    // Enviar productos existentes al cliente cuando se conecta
    const products = await productManager.getProducts();
    socket.emit('initializeProducts', products);

    // Socket.io recibo solicitud de creacion de producto
    socket.on('createProduct', async (productData) => {
        // Middleware para validar que se envíen datos correctos en el formulario
        const errors = validateProductData(productData);

        if (errors.length > 0) {
            socket.emit('validationErrors', { errors });
            return;
        }

        try {
            const newProduct = await productManager.addProduct({
                title: productData.titulo,
                description: productData.descripcion,
                code: productData.codigo,
                price: Number(productData.precio),
                stock: Number(productData.stock),
                category: productData.categoria,
                status: true
            });

            socketServer.emit('productCreated', newProduct);
    
        } catch (error) {
            console.error('Error al crear producto:', error);
        }
    });

    // Manejar la solicitud de eliminación de producto
    socket.on('deleteProduct', async (productId) => {
        try {
            await productManager.deleteProduct(Number(productId));
            socketServer.emit('productDeleted', productId);
        } catch (error) {
            console.error('Error al eliminar producto:', error);
        }
    });
});

// Helper de handlebars para formato de precio
Handlebars.registerHelper('formatCurrency', function (value) {
    return new Intl.NumberFormat('es-AR', { style: 'currency', currency: 'ARS', minimumFractionDigits: 0 }).format(value);
});

// Configuracion de motor de plantillas Handlebars
app.engine('handlebars', engine({
    layoutsDir: `${config.DIRNAME}/views/layouts`,
    defaultLayout: 'main',
    helpers: {
        isArray: function (value) {
            return Array.isArray(value);
        }
    }
}));

app.set('views', `${config.DIRNAME}/views`);
app.set('view engine', 'handlebars');

// Middlewares
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Ruta principal
app.get('/', (req, res) => {
    console.log('Ruta principal accedida');
    res.redirect('/api/views');
});

// Rutas de la API
app.use('/api/products', productsRouter);
app.use('/api/carts', cartsRouter);
app.use('/api/views', viewsRouter);

// Captura de errores
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send('Algo salió mal!');
});

// Utilizacion de static para la carpeta public
app.use('/static', express.static(`${config.DIRNAME}/public`));
